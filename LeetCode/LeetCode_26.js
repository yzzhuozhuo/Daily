/*
题目描述：给定一个排序数组，你需要在原地删除重复出现的元素，
使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组，并在使用O(1)额外空间的情况下完成
*/
/* 
示例示例 1:

给定数组 nums = [1,1,2], 

函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

你不需要考虑数组中超出新长度后面的元素。
示例 2:

给定 nums = [0,0,1,1,1,2,2,3,3,4],

函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素。

*/
/* 
 解决方法 ---> 双指针法 快指针j 慢指针i
 只要 nums[i] = nums[j]，就增加j跳过重复项
 当  nums[i] ≠ nums[j]时，跳过重复项的运行已经结束，
 因此我们必须把它（nums[j]）的值复制到 nums[i + 1]。
 然后递增 i，接着我们将再次重复相同的过程，直到 j 到达数组的末尾为止。
*/
function removeDuplicates(nums) {
  if (nums.length === 0) {
    return 0
  }
  var i = 0;
  for (var j = 1; j < nums.length; j++) {
    if (nums[i] != nums[j]) {
      i++;
      nums[i] = nums[j]
    }
  }
  return i+1
}
var nums = [0,0,1,1,1,2,2,3,3,4]
console.log(removeDuplicates(nums))